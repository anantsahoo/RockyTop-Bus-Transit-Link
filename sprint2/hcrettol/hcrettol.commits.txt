ProjectWorkspace\src\BackEnd\v3\requirements.txt
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 8) email_validator==2.2.0
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 9) numpy==2.0.2


ProjectWorkspace\src\BackEnd\v3\run.py
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 1) from app import create_app
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 2)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 3) app = create_app()
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 4)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 5) if __name__ == '__main__':
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 6)     app.run(debug=True)


ProjectWorkspace\src\BackEnd\v3\app\graph_utils.py
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  1) import pandas as pd
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  2) from datetime import datetime, timedelta
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  3) import networkx as nx
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  4)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  5) def time_to_seconds(time_str):
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  6)     h, m, s = map(int, time_str.split(':'))
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  7)     return h * 3600 + m * 60 + s
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  8)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  9) def build_graph():
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 10)     # Load GTFS data
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 11)     stops = pd.read_csv('gtfs/stops.txt', dtype={'stop_id': str})
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 12)     stop_times = pd.read_csv('gtfs/stop_times.txt', dtype={'trip_id': str, 'stop_id': str})
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 13)     trips = pd.read_csv('gtfs/trips.txt', dtype={'trip_id': str, 'route_id': str})
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 14)     routes = pd.read_csv('gtfs/routes.txt', dtype={'route_id': str})
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 15)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 16)     # Convert times to seconds since midnight
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 17)     stop_times['arrival_seconds'] = stop_times['arrival_time'].apply(time_to_seconds)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 18)     stop_times['departure_seconds'] = stop_times['departure_time'].apply(time_to_seconds)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 19)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 20)     # Sort stop_times by trip_id and stop_sequence
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 21)     stop_times.sort_values(['trip_id', 'stop_sequence'], inplace=True)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 22)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 23)     now = datetime.now()
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 24)     current_time_seconds = now.hour * 3600 + now.minute * 60 + now.second
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 25)     max_future_time = current_time_seconds + (4 * 3600)  # Next 4 hours
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 26)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 27)     # Filter stop_times within the time window
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 28)     stop_times = stop_times[
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 29)         (stop_times['departure_seconds'] >= current_time_seconds) &
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 30)         (stop_times['departure_seconds'] <= max_future_time)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 31)     ]
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 32)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 33)     # Build the graph
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 34)     G = nx.DiGraph()
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 35)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 36)     # Add edges for trips
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 37)     for trip_id, group in stop_times.groupby('trip_id'):
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 38)         group = group.sort_values('stop_sequence')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 39)         previous_node = None
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 40)         for idx, row in group.iterrows():
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 41)             stop_id = row['stop_id']
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 42)             arrival_time = row['arrival_seconds']
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 43)             departure_time = row['departure_seconds']
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 44)             node = (stop_id, arrival_time)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 45)             G.add_node(node)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 46)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 47)             if previous_node:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 48)                 # Add edge from previous node to current node
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 49)                 G.add_edge(previous_node, node, weight=departure_time - previous_node[1])
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 50)             previous_node = (stop_id, departure_time)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 51)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 52)     # Define a transfer time (e.g., 5 minutes)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 53)     TRANSFER_TIME = 300  # 5 minutes in seconds
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 54)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 55)     # Add transfer edges
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 56)     for stop_id, group in stop_times.groupby('stop_id'):
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 57)         times = group['arrival_seconds'].unique()
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 58)         times.sort()
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 59)         for i in range(len(times)):
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 60)             for j in range(i + 1, len(times)):
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 61)                 if times[j] - times[i] >= TRANSFER_TIME:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 62)                     node_from = (stop_id, times[i])
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 63)                     node_to = (stop_id, times[j])
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 64)                     G.add_edge(node_from, node_to, weight=times[j] - times[i])
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 65)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 66)     return G
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 67)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 68) def find_earliest_path(G, start_stop_id, end_stop_id, current_time_seconds):
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 69)     # Find all nodes at the starting stop after the current time
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 70)     start_nodes = [node for node in G.nodes if node[0] == start_stop_id and node[1] >= current_time_seconds]
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 71)     if not start_nodes:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 72)         return None  # No available starting nodes
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 73)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 74)     # Find all nodes at the ending stop
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 75)     end_nodes = [node for node in G.nodes if node[0] == end_stop_id]
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 76)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 77)     min_arrival_time = None
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 78)     best_path = None
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 79)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 80)     # Try to find the earliest arrival path for each starting node
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 81)     for start_node in start_nodes:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 82)         for end_node in end_nodes:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 83)             try:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 84)                 path = nx.shortest_path(G, start_node, end_node, weight='weight')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 85)                 arrival_time = path[-1][1]
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 86)                 if min_arrival_time is None or arrival_time < min_arrival_time:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 87)                     min_arrival_time = arrival_time
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 88)                     best_path = path
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 89)             except nx.NetworkXNoPath:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 90)                 continue  # No path between these nodes
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 91)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 92)     return best_path


ProjectWorkspace\src\BackEnd\v3\app\models.py
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  8)     email = db.Column(db.String(120), unique=True, nullable=False)  # New field


ProjectWorkspace\src\BackEnd\v3\app\routes.py
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400   1) from flask import Blueprint, render_template, redirect, url_for, flash, request, jsonify, g, current_app
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400   2) from flask_login import login_user, logout_user, login_required, current_user
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400   3) from email_validator import validate_email, EmailNotValidError
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400   4) from datetime import datetime, timedelta
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400   5) import re
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400   6) import pandas as pd
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400   7) import networkx as nx
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400   8) from .models import User, db
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400   9) from .graph_utils import build_graph, find_earliest_path, time_to_seconds
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  10) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  11) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  12) # Read GTFS data
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  13) stops = pd.read_csv('gtfs/stops.txt', dtype={'stop_id': str})
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  14) stop_times = pd.read_csv('gtfs/stop_times.txt', dtype={'trip_id': str, 'stop_id': str})
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  15) trips = pd.read_csv('gtfs/trips.txt', dtype={'trip_id': str, 'route_id': str})
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  16) routes = pd.read_csv('gtfs/routes.txt', dtype={'route_id': str})
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  17) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  18) # Parse arrival and departure times
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  19) stop_times['arrival_seconds'] = stop_times['arrival_time'].apply(time_to_seconds)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  20) stop_times['departure_seconds'] = stop_times['departure_time'].apply(time_to_seconds)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  21) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  22) # Sort stop_times by trip_id and stop_sequence
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  23) stop_times.sort_values(['trip_id', 'stop_sequence'], inplace=True)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  24) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  25) main = Blueprint('main', __name__)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  30) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  31) @main.route('/login', methods=['GET', 'POST'])
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  32) def login():
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  33)     if request.method == 'POST':
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  34)         identifier = request.form['username_or_email'].strip()
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  35)         password = request.form['password']
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  36) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  37)         # Check if identifier is email or username
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  38)         user = User.query.filter((User.username == identifier) | (User.email == identifier)).first()
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  39)         if user and user.check_password(password):
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  40)             login_user(user)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  41)             return redirect(url_for('main.map_view'))
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  42)         else:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  43)             flash("Invalid username/email or password", 'danger')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  44)             return render_template('login.html')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  45)     return render_template('login.html')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  46) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  47) def validate_password(password):
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  48)     if len(password) < 8:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  49)         return False
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  50)     # Check for letters and numbers
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  51)     if not re.search(r'[A-Za-z]', password):
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  52)         return False
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  53)     if not re.search(r'\d', password):
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  54)         return False
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  55)     return True
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  56) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  57) @main.route('/register', methods=['GET', 'POST'])
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  58) def register():
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  59)     if request.method == 'POST':
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  60)         username = request.form['username'].strip()
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  61)         email = request.form['email'].strip()
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  62)         password = request.form['password']
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  63) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  64)         # Check if username is already taken
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  65)         if User.query.filter_by(username=username).first():
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  66)             flash('Username already taken.', 'danger')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  67)             return render_template('register.html')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  68) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  69)         # Check if email is already registered
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  70)         if User.query.filter_by(email=email).first():
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  71)             flash('Email already registered.', 'danger')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  72)             return render_template('register.html')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  73) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  74)         # Validate email
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  75)         try:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  76)             valid = validate_email(email)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  77)             email = valid.email  # Replace with normalized form
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  78)         except EmailNotValidError as e:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  79)             flash(str(e), 'danger')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  80)             return render_template('register.html')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  81) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  82)         # Validate password
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  83)         if not validate_password(password):
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  84)             flash('Password must be at least 8 characters long and contain letters and numbers.', 'danger')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  85)             return render_template('register.html')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  86) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  87)         new_user = User(username=username, email=email)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  88)         new_user.set_password(password)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  89)         db.session.add(new_user)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  90)         db.session.commit()
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  91)         flash('Registration successful! Please log in.', 'success')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  92)         return redirect(url_for('main.login'))
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  93)     return render_template('register.html')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 190) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 191) @main.route('/plan_trip', methods=['POST'])
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 192) def plan_trip():
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 193)     start_stop_id = request.form.get('start_stop_id')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 194)     end_stop_id = request.form.get('end_stop_id')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 195) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 196)     if not start_stop_id or not end_stop_id:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 197)         flash('Please select valid start and end stops from the suggestions.', 'danger')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 198)         return redirect(url_for('main.map_view'))
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 199) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 200)     # Convert current time to seconds since midnight
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 201)     now = datetime.now()
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 202)     current_time_seconds = now.hour * 3600 + now.minute * 60 + now.second
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 203) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 204)     # Build or load the graph (cache it to improve performance)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 205)     if 'graph' not in g:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 206)         g.graph = build_graph()
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 207)     G = current_app.config['graph']
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 208) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 209)     # Find the earliest path
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 210)     path = find_earliest_path(G, start_stop_id, end_stop_id, current_time_seconds)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 211) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 212)     if not path:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 213)         flash('No available routes found.', 'danger')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 214)         return redirect(url_for('main.map_view'))
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 215) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 216)     # Extract trip segments and stops
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 217)     trip_segments = []
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 218)     for i in range(len(path) - 1):
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 219)         from_node = path[i]
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 220)         to_node = path[i + 1]
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 221)         edge_data = G.get_edge_data(from_node, to_node)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 222)         trip_segments.append({
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 223)             'from_stop_id': from_node[0],
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 224)             'to_stop_id': to_node[0],
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 225)             'departure_time': from_node[1],
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 226)             'arrival_time': to_node[1],
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 227)             'duration': edge_data['weight']
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 228)         })
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 229) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 230)     # Prepare data for rendering
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 231)     # Load stops data (you can cache this as well)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 232)     stops = pd.read_csv('gtfs/stops.txt', dtype={'stop_id': str})
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 233)     stop_details = stops.set_index('stop_id').to_dict('index')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 234) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 235)     # Convert times back to HH:MM:SS format
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 236)     for segment in trip_segments:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 237)         segment['from_stop_name'] = stop_details[segment['from_stop_id']]['stop_name']
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 238)         segment['to_stop_name'] = stop_details[segment['to_stop_id']]['stop_name']
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 239)         segment['departure_time_str'] = str(timedelta(seconds=segment['departure_time']))
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 240)         segment['arrival_time_str'] = str(timedelta(seconds=segment['arrival_time']))
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 241)         segment['from_stop_lat'] = stop_details[segment['from_stop_id']]['stop_lat']
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 242)         segment['from_stop_lon'] = stop_details[segment['from_stop_id']]['stop_lon']
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 243)         segment['to_stop_lat'] = stop_details[segment['to_stop_id']]['stop_lat']
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 244)         segment['to_stop_lon'] = stop_details[segment['to_stop_id']]['stop_lon']
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 245) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 246)     # Calculate total travel time
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 247)     total_travel_time = int(path[-1][1] - path[0][1])
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 248)     total_travel_time_str = str(timedelta(seconds=total_travel_time))
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 249) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 250)     return render_template('trip_plan.html', trip_segments=trip_segments, total_travel_time=total_travel_time_str)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 251) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 252) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 253) @main.route('/stop/<stop_id>')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 254) def stop_detail(stop_id):
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 255)     #print(f"Received stop_id: {stop_id} (type: {type(stop_id)})")
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 256) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 257)     # Read stop_id as string
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 258)     stop = stops[stops['stop_id'] == stop_id]
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 259) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 260)     #print(f"DataFrame stop_id types: {stops['stop_id'].dtype}")
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 261)     #print(f"Available stop_ids: {stops['stop_id'].unique()}")
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 262) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 263)     if stop.empty:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 264)         flash('Stop not found.', 'danger')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 265)         return redirect(url_for('main.map_view'))
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 266) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 267)     stop = stop.iloc[0].to_dict()
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 268) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 269)     # Read stop_times.txt with stop_id and trip_id as strings
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 270)     stop_times = pd.read_csv('gtfs/stop_times.txt', dtype={'stop_id': str, 'trip_id': str})
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 271)     trips = stop_times[stop_times['stop_id'] == stop_id]['trip_id'].unique()
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 272) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 273)     # Read trips.txt with trip_id and route_id as strings
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 274)     trips_df = pd.read_csv('gtfs/trips.txt', dtype={'trip_id': str, 'route_id': str})
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 275)     routes = trips_df[trips_df['trip_id'].isin(trips)]['route_id'].unique()
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 276) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 277)     # Read routes.txt with route_id as string
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 278)     routes_df = pd.read_csv('gtfs/routes.txt', dtype={'route_id': str})
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 279)     route_details = routes_df[routes_df['route_id'].isin(routes)]
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 280) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 281)     route_list = route_details.to_dict('records')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 282) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 283)     return render_template('stop_detail.html', stop=stop, routes=route_list)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 284) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 285) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 286) def time_to_seconds(time_str):
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 287)     h, m, s = map(int, time_str.split(':'))
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 288)     return h * 3600 + m * 60 + s
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 289) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 290) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 291) def parse_time(time_str):
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 292)     h, m, s = map(int, time_str.split(':'))
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 293)     if h >= 24:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 294)         h -= 24
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 295)         return datetime.combine(datetime.today() + timedelta(days=1), datetime.min.time()) + timedelta(hours=h, minutes=m, seconds=s)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 296)     else:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 297)         return datetime.combine(datetime.today(), datetime.min.time()) + timedelta(hours=h, minutes=m, seconds=s)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 298) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 299) def find_routes(start_stop_id, end_stop_id, current_time):
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 300)     # Convert current time to seconds since midnight
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 301)     current_time_seconds = time_to_seconds(current_time)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 302) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 303)     # Filter stop_times for the starting stop
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 304)     start_stop_times = stop_times[stop_times['stop_id'] == start_stop_id]
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 305)     start_stop_times['arrival_seconds'] = start_stop_times['arrival_time'].apply(time_to_seconds)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 306) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 307)     # Filter for times after the current time
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 308)     future_start_times = start_stop_times[start_stop_times['arrival_seconds'] >= current_time_seconds]
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 309) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 310)     # Get trips that start at the start_stop after the current time
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 311)     possible_trips = future_start_times['trip_id'].unique()
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 312) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 313)     valid_trips = []
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 314)     for trip_id in possible_trips:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 315)         trip_stop_times = stop_times[stop_times['trip_id'] == trip_id]
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 316)         trip_stop_times = trip_stop_times.sort_values('stop_sequence')
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 317)         stop_ids = trip_stop_times['stop_id'].tolist()
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 318) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 319)         # Check if the end_stop comes after the start_stop in the trip
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 320)         if start_stop_id in stop_ids and end_stop_id in stop_ids:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 321)             start_index = stop_ids.index(start_stop_id)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 322)             end_index = stop_ids.index(end_stop_id)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 323)             if end_index > start_index:
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 324)                 valid_trips.append(trip_id)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 325) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 326)     return valid_trips
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 327) 


ProjectWorkspace\src\BackEnd\v3\app\__init__.py
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  6) from .graph_utils import build_graph
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  7)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  8) db = SQLAlchemy()
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  9) login_manager = LoginManager()
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 10)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 11) def create_app():
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 12)     app = Flask(__name__)
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 13)     # Build the graph when the app starts
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 14)     app.config['graph'] = build_graph()


ProjectWorkspace\src\BackEnd\v3\app\templates\base.html
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  8)     <style>
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  9)       /* Ensure the map does not overlap the autocomplete suggestions */
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 10)       #map-container {
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 11)           position: relative;
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 12)       }
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 13)   
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 14)       #map {
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 15)           position: relative;
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 16)           z-index: 1;
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 17)       }
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 18)   
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 19)       /* Set a higher z-index for the autocomplete suggestions */
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 20)       .ui-autocomplete {
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 21)           z-index: 1000 !important;
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 22)       }
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 23)     </style>


ProjectWorkspace\src\BackEnd\v3\app\templates\login.html
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 33)             <input type="text" name="username_or_email" placeholder="Username or Email" required class="form-control">


ProjectWorkspace\src\BackEnd\v3\app\templates\map.html

da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  35)     <form method="POST" action="{{ url_for('main.plan_trip') }}" class="row g-3" onsubmit="return validateForm();">
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  63)     <div class="row" style="margin-top: 20px;"></div>
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  64)     <div id="map" style="height: 600px;"></div>
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  86) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  87)     function validateForm() {
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  88)         var startStopId = $("#start_stop_id").val();
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  89)         var endStopId = $("#end_stop_id").val();
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  90) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  91)         if (!startStopId || !endStopId) {
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  92)             alert("Please select valid start and end stops from the suggestions.");
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  93)             return false; // Prevent form submission
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  94)         }
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  95)         return true; // Allow form submission
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  96)     }
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  97) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  98)     // Setup autocomplete for start and end locations
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400  99)     function setupAutocomplete(inputId, hiddenId) {
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 100)         $("#" + inputId).autocomplete({
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 101)             source: function(request, response) {
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 102)                 $.ajax({
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 103)                     url: "{{ url_for('main.autocomplete') }}",
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 104)                     dataType: "json",
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 105)                     data: { term: request.term },
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 106)                     success: function(data) {
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 107)                         response(data);
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 108)                     }
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 109)                 });
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 110)             },
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 111)             minLength: 2,
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 112)             select: function(event, ui) {
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 113)                 $("#" + inputId).val(ui.item.label);
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 114)                 $("#" + hiddenId).val(ui.item.value);
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 115)                 return false;
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 116)             },
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 117)             change: function(event, ui) {
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 118)                 if (!ui.item) {
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 119)                     $("#" + hiddenId).val('');
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 120)                 }
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 121)             }
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 122)         });
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 123)     }
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 124) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 125)     setupAutocomplete("start_stop", "start_stop_id");
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 126)     setupAutocomplete("end_stop", "end_stop_id");
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 127) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 128)     // Handle favorite location buttons
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 129)     $(".favorite-location-btn").click(function() {
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 130)         var locationName = $(this).data('stop-name');
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 131)         if ($("#start_stop").val() === "") {
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 132)             $("#start_stop").val(locationName);
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 133)         } else if ($("#end_stop").val() === "") {
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 134)             $("#end_stop").val(locationName);
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 135)         } else {
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 136)             // Both fields are filled; replace the end location
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 137)             $("#end_stop").val(locationName);
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 138)         }
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 139)         // Optionally trigger autocomplete to fill in hidden stop IDs
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 140)         $("#start_stop, #end_stop").autocomplete("search");
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 141)     });
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 142) 
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 143) </script>
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 144) {% endblock %}


ProjectWorkspace\src\BackEnd\v3\app\templates\register.html
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 33)             <input type="text" name="username" placeholder="Username" required class="form-control">
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 34)         </div>
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 35)         <div class="mb-3">
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 36)             <input type="email" name="email" placeholder="Email" required class="form-control">
da9f2f0a (Harrison Crettol 2024-10-16 20:00:38 -0400 37)         </div>
